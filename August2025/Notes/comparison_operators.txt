strict equality operator -> "==="
loose quality operator -> "=="
ex. 2+2 === 4 > true

type coercion - for ex. 2 == "2" is true but 2 === "2" is false

same for !== and !=

op : ===, !==, ==, !=, >, <, >=, <=

loose quality examples -> "mystring" == true -> true, 0 == true -> false
0, null, undefined, NaN, "" are false

Logical operator -> &&, ||, !, or we can use !!"string" -> true

example -

&& - "str" && "mystr" => "mystr"
basically in && first operand is resulted unchanged if it can be evaluatd to false

|| - true || false -> true
basically in || first operand is only resulted if evalueates to true

?? -> nullish coalescing op - return first operand if it anything other 
than null or undefined otherwise second

= -> assignment op

&== -> if first operand is true assign its value of second operand
ex. -> false &&= 2+2 -> false

||= -> evalueates second operand and assign value to first if first operand is false
false ||= 2+2 -> 4

